type Person{
  	PersonID:ID!
	PersonName: String!
	Email: String!
	PersonCity: String!
}
type Review{
	ReviewID:ID!
	StarRating: String!
	ReviewText: String!
	ReviewDate: String!
}
type Restaurant{
	RestaurantID:ID!
	RestaurantName: String!
	RestaurantCity: String!
}
type Cuisine{
	CuisineID:ID
	CuisineName: String!
}
type Query{
	ListPersons: [Person]
	PersonFriends(PersonID: String!): [Person]
	FriendofFriends(PersonID: String!): [Person]
	RestaurantWithSpecificCuisine(PersonID: String!,CuisineName:String!	): Restaurant!
    RestaurantNearMeHiehestRated(	PersonID: String!): [Restaurant!]
    LatestReview(RestaurantID:String):[Review]
}
input PersonInput {
	PersonName: String!
	Email: String!
	PersonID: ID!
	PersonCity: String!
}

input ReviewInput {
	ReviewID:ID!
	PersonID:String!
	RestaurantID:String!
	StarRating: String!
	ReviewText: String!
	ReviewDate: String!
}
input RestaurantInput{
	RestaurantID:ID!
	RestaurantName: String!
	RestaurantCity: String!
}
input CuisineInput{
CuisineID:ID!
	CuisineName: String!
	RestaurantID:String!
}
type Mutation {
addFriend(Person1ID:String , Person2ID:String):String
addRestaurant(restaurant:RestaurantInput!):Restaurant
createPerson(person: PersonInput!): Person!
createReview(review:ReviewInput!):String
addCuisine(cuisine:CuisineInput):String
}